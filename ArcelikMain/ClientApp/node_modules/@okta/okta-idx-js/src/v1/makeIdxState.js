"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

require("core-js/modules/es.function.name.js");

var _find = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/find"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/toConsumableArray"));

var _idxResponseParser = require("./idxResponseParser");

/*!
 * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var makeIdxState = function makeIdxState(idxResponse, toPersist) {
  var _rawIdxResponse$succe, _context2;

  var rawIdxResponse = idxResponse;

  var _parseIdxResponse = (0, _idxResponseParser.parseIdxResponse)(idxResponse, toPersist),
      remediations = _parseIdxResponse.remediations,
      context = _parseIdxResponse.context,
      actions = _parseIdxResponse.actions;

  var neededToProceed = (0, _toConsumableArray2.default)(remediations);

  var proceed = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(remediationChoice) {
      var paramsFromUser,
          remediationChoiceObject,
          _args = arguments;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              paramsFromUser = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

              /*
              remediationChoice is the name attribute on each form
              name should remain unique for items inside the remediation that are considered forms(identify, select-factor)
              name can be duplicate for items like redirect where its not considered a form(redirect)
              when names are not unique its a redirect to a href, so widget wont POST to idx-js layer.
              */
              remediationChoiceObject = (0, _find.default)(remediations).call(remediations, function (remediation) {
                return remediation.name === remediationChoice;
              });

              if (remediationChoiceObject) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return", _promise.default.reject("Unknown remediation choice: [".concat(remediationChoice, "]")));

            case 4:
              return _context.abrupt("return", remediationChoiceObject.action(paramsFromUser));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function proceed(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  var hasInteractionCode = function hasInteractionCode() {
    return !!rawIdxResponse.successWithInteractionCode;
  };

  var findCode = function findCode(item) {
    return item.name === 'interaction_code';
  };

  var interactionCode = (_rawIdxResponse$succe = rawIdxResponse.successWithInteractionCode) === null || _rawIdxResponse$succe === void 0 ? void 0 : (0, _find.default)(_context2 = _rawIdxResponse$succe.value).call(_context2, findCode).value;
  return {
    proceed: proceed,
    neededToProceed: neededToProceed,
    actions: actions,
    context: context,
    rawIdxState: rawIdxResponse,
    hasInteractionCode: hasInteractionCode,
    interactionCode: interactionCode,
    toPersist: toPersist
  };
};

var _default = makeIdxState;
exports.default = _default;