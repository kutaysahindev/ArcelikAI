"use strict";

var _Object$keys2 = require("@babel/runtime-corejs3/core-js-stable/object/keys");

var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");

var _filterInstanceProperty2 = require("@babel/runtime-corejs3/core-js-stable/instance/filter");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _forEachInstanceProperty2 = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");

var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");

var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.parseIdxResponse = exports.parseNonRemediations = void 0;

require("core-js/modules/es.function.name.js");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/typeof"));

var _fromEntries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/from-entries"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/entries"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _remediationParser = require("./remediationParser");

var _generateIdxAction = _interopRequireDefault(require("./generateIdxAction"));

var _jsonpathPlus = require("jsonpath-plus");

var _context;

function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty2(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context8; _forEachInstanceProperty2(_context8 = ownKeys(Object(source), true)).call(_context8, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context9; _forEachInstanceProperty2(_context9 = ownKeys(Object(source))).call(_context9, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SKIP_FIELDS = (0, _fromEntries.default)((0, _map.default)(_context = ['remediation', // remediations are put into proceed/neededToProceed
'context' // the API response of 'context' isn't externally useful.  We ignore it and put all non-action (contextual) info into idxState.context
]).call(_context, function (field) {
  return [field, !!'skip this field'];
}));

var parseNonRemediations = function parseNonRemediations(idxResponse) {
  var _context2, _context3;

  var toPersist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var actions = {};
  var context = {};
  (0, _forEach.default)(_context2 = (0, _filter.default)(_context3 = (0, _keys.default)(idxResponse)).call(_context3, function (field) {
    return !SKIP_FIELDS[field];
  })).call(_context2, function (field) {
    var _context4;

    var fieldIsObject = (0, _typeof2.default)(idxResponse[field]) === 'object' && !!idxResponse[field];

    if (!fieldIsObject) {
      // simple fields are contextual info
      context[field] = idxResponse[field];
      return;
    }

    if (idxResponse[field].rel) {
      // top level actions
      actions[idxResponse[field].name] = (0, _generateIdxAction.default)(idxResponse[field], toPersist);
      return;
    }

    var _idxResponse$field = idxResponse[field],
        fieldValue = _idxResponse$field.value,
        type = _idxResponse$field.type,
        info = (0, _objectWithoutProperties2.default)(_idxResponse$field, ["value", "type"]);
    context[field] = _objectSpread({
      type: type
    }, info); // add the non-action parts as context

    if (type !== 'object') {
      // only object values hold actions
      context[field].value = fieldValue;
      return;
    } // We are an object field containing an object value


    context[field].value = {};
    (0, _forEach.default)(_context4 = (0, _entries.default)(fieldValue)).call(_context4, function (_ref) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          subField = _ref2[0],
          value = _ref2[1];

      if (value.rel) {
        var _context5;

        // is [field].value[subField] an action?
        // add any "action" value subfields to actions
        actions[(0, _concat.default)(_context5 = "".concat(field, "-")).call(_context5, subField.name || subField)] = (0, _generateIdxAction.default)(value, toPersist);
      } else {
        // add non-action value subfields to context
        context[field].value[subField] = value;
      }
    });
  });
  return {
    context: context,
    actions: actions
  };
};

exports.parseNonRemediations = parseNonRemediations;

var expandRelatesTo = function expandRelatesTo(idxResponse, value) {
  var _context6;

  (0, _forEach.default)(_context6 = (0, _keys.default)(value)).call(_context6, function (k) {
    if (k === 'relatesTo') {
      var query = (0, _isArray.default)(value[k]) ? value[k][0] : value[k];

      if (typeof query === 'string') {
        // eslint-disable-next-line new-cap
        var result = (0, _jsonpathPlus.JSONPath)({
          path: query,
          json: idxResponse
        })[0];

        if (result) {
          value[k] = result;
          return;
        }
      }
    }

    if ((0, _isArray.default)(value[k])) {
      var _context7;

      (0, _forEach.default)(_context7 = value[k]).call(_context7, function (innerValue) {
        return expandRelatesTo(idxResponse, innerValue);
      });
    }
  });
};

var convertRemediationAction = function convertRemediationAction(remediation, toPersist) {
  var remediationActions = (0, _remediationParser.generateRemediationFunctions)([remediation], toPersist);
  var actionFn = remediationActions[remediation.name];
  return _objectSpread(_objectSpread({}, remediation), {}, {
    action: actionFn
  });
};

var parseIdxResponse = function parseIdxResponse(idxResponse) {
  var _idxResponse$remediat;

  var toPersist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var remediationData = ((_idxResponse$remediat = idxResponse.remediation) === null || _idxResponse$remediat === void 0 ? void 0 : _idxResponse$remediat.value) || [];
  (0, _forEach.default)(remediationData).call(remediationData, function (remediation) {
    return expandRelatesTo(idxResponse, remediation);
  });
  var remediations = (0, _map.default)(remediationData).call(remediationData, function (remediation) {
    return convertRemediationAction(remediation, toPersist);
  });

  var _parseNonRemediations = parseNonRemediations(idxResponse, toPersist),
      context = _parseNonRemediations.context,
      actions = _parseNonRemediations.actions;

  return {
    remediations: remediations,
    context: context,
    actions: actions
  };
};

exports.parseIdxResponse = parseIdxResponse;