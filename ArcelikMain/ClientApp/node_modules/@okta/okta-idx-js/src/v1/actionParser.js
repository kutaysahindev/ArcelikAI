"use strict";

require("core-js/modules/es.object.to-string.js");

var _sliceInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/slice");

var _Array$from = require("@babel/runtime-corejs3/core-js-stable/array/from");

var _Symbol = require("@babel/runtime-corejs3/core-js-stable/symbol");

var _getIteratorMethod = require("@babel/runtime-corejs3/core-js/get-iterator-method");

var _Array$isArray2 = require("@babel/runtime-corejs3/core-js-stable/array/is-array");

var _getIterator = require("@babel/runtime-corejs3/core-js/get-iterator");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.divideActionParamsByMutability = void 0;

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

require("core-js/modules/es.function.name.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === "undefined" || _getIteratorMethod(o) == null) { if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o)).call(_context, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!
 * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var isFieldMutable = function isFieldMutable(field) {
  // mutable defaults to true, annoyingly
  return field.mutable !== false;
};

var divideSingleActionParamsByMutability = function divideSingleActionParamsByMutability(action) {
  var defaultParamsForAction = {}; // mutable and present

  var neededParamsForAction = []; // mutable values

  var immutableParamsForAction = {}; // immutable
  // TODO: remove assumption that form names are unique, neededParams being an array is a temp fix
  // not all actions have value (e.g. redirect)
  // making sure they are not empty and instead hold the remediation object

  if (!action.value) {
    neededParamsForAction.push(action);
    return {
      defaultParamsForAction: defaultParamsForAction,
      neededParamsForAction: neededParamsForAction,
      immutableParamsForAction: immutableParamsForAction
    };
  }

  var _iterator = _createForOfIteratorHelper(action.value),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var field = _step.value;

      if (isFieldMutable(field)) {
        var _field$value;

        neededParamsForAction.push(field);

        if ((_field$value = field.value) !== null && _field$value !== void 0 ? _field$value : false) {
          defaultParamsForAction[field.name] = field.value;
        }
      } else {
        var _field$value2;

        immutableParamsForAction[field.name] = (_field$value2 = field.value) !== null && _field$value2 !== void 0 ? _field$value2 : '';
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return {
    defaultParamsForAction: defaultParamsForAction,
    neededParamsForAction: neededParamsForAction,
    immutableParamsForAction: immutableParamsForAction
  };
};

var divideActionParamsByMutability = function divideActionParamsByMutability(actionList) {
  // TODO: when removing form name is unique assumption, this may all be redundant
  actionList = (0, _isArray.default)(actionList) ? actionList : [actionList];
  var neededParams = [];
  var defaultParams = {};
  var immutableParams = {};

  var _iterator2 = _createForOfIteratorHelper(actionList),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var action = _step2.value;

      var _divideSingleActionPa = divideSingleActionParamsByMutability(action),
          defaultParamsForAction = _divideSingleActionPa.defaultParamsForAction,
          neededParamsForAction = _divideSingleActionPa.neededParamsForAction,
          immutableParamsForAction = _divideSingleActionPa.immutableParamsForAction;

      neededParams.push(neededParamsForAction);
      defaultParams[action.name] = defaultParamsForAction;
      immutableParams[action.name] = immutableParamsForAction;
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return {
    defaultParams: defaultParams,
    neededParams: neededParams,
    immutableParams: immutableParams
  };
};

exports.divideActionParamsByMutability = divideActionParamsByMutability;