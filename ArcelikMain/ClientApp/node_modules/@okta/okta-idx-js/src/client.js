"use strict";

var _Object$keys = require("@babel/runtime-corejs3/core-js-stable/object/keys");

var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");

var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _forEachInstanceProperty2 = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");

var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");

var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.request = exports.HttpClient = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _crossFetch = _interopRequireDefault(require("cross-fetch"));

var _userAgent = require("./userAgent");

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty2(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty2(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Reusable interceptor interface
 */
function Interceptor() {
  this.handlers = []; // Adds a new interceptor to our HttpClient

  this.use = function (before) {
    this.handlers.push({
      before: before
    });
  }; // Clears all interceptors


  this.clear = function () {
    this.handlers = [];
  };
}
/**
 * Singleton instance of the IdX HTTP Client
 *
 * Invoke the `use` method to add a new interceptor:
 *   - client.interceptors.request.use((requestConfig) => { some logic });
 */


var HttpClient = {
  interceptors: {
    request: new Interceptor()
  }
};
exports.HttpClient = HttpClient;

var request = /*#__PURE__*/function () {
  var _request = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(target, _ref) {
    var _ref$method, method, _ref$headers, headers, _ref$credentials, credentials, body, requestOptions, _context, url;

    return _regenerator.default.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _ref$method = _ref.method, method = _ref$method === void 0 ? 'POST' : _ref$method, _ref$headers = _ref.headers, headers = _ref$headers === void 0 ? {} : _ref$headers, _ref$credentials = _ref.credentials, credentials = _ref$credentials === void 0 ? 'include' : _ref$credentials, body = _ref.body;
            requestOptions = {
              url: target,
              method: method,
              headers: _objectSpread(_objectSpread({}, (0, _userAgent.userAgentHeaders)()), headers),
              credentials: credentials,
              body: body
            };

            if (HttpClient.interceptors) {
              (0, _forEach.default)(_context = HttpClient.interceptors.request.handlers).call(_context, function (interceptor) {
                interceptor.before(requestOptions);
              });
            } // Extract the URL to adhere to the fetch API


            url = requestOptions.url;
            delete requestOptions.url;
            return _context2.abrupt("return", (0, _crossFetch.default)(url, requestOptions));

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee);
  }));

  function request(_x, _x2) {
    return _request.apply(this, arguments);
  }

  return request;
}();

exports.request = request;