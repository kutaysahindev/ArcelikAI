{"version":3,"sources":["../../../lib/util/object.ts"],"names":["bind","fn","ctx","additionalArgs","Array","prototype","slice","call","arguments","args","concat","apply","extend","obj1","objArray","forEach","obj","prop","Object","hasOwnProperty","undefined","removeNils","cleaned","value","clone","str","JSON","stringify","parse","omit","props","newobj","p","indexOf","find","collection","searchParams","c","length","item","found","getLink","linkName","altName","_links","link","name"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nexport function bind(fn, ctx) {\n  var additionalArgs = Array.prototype.slice.call(arguments, 2);\n  return function() {\n    var args = Array.prototype.slice.call(arguments);\n    args = additionalArgs.concat(args);\n    return fn.apply(ctx, args);\n  };\n}\n\n// TODO: replace all references with `Object.assign` then remove this function\nexport function extend() {\n  // First object will be modified!\n  var obj1 = arguments[0];\n  // Properties from other objects will be copied over\n  var objArray = [].slice.call(arguments, 1);\n  objArray.forEach(function(obj) {\n    for (var prop in obj) {\n      // copy over all properties with defined values\n      if (Object.prototype.hasOwnProperty.call(obj, prop) && obj[prop] !== undefined) {\n        obj1[prop] = obj[prop];\n      }\n    }\n  });\n  return obj1; // return the modified object\n}\n\nexport function removeNils(obj) {\n  var cleaned = {};\n  for (var prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      var value = obj[prop];\n      if (value !== null && value !== undefined) {\n        cleaned[prop] = value;\n      }\n    }\n  }\n  return cleaned;\n}\n\nexport function clone(obj) {\n  if (obj) {\n    var str = JSON.stringify(obj);\n    if (str) {\n      return JSON.parse(str);\n    }\n  }\n  return obj;\n}\n\n// Analogous to _.omit\nexport function omit(obj, ...props: any[]) {\n  // var props = Array.prototype.slice.call(arguments, 1);\n  var newobj = {};\n  for (var p in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, p) && props.indexOf(p) == -1) {\n      newobj[p] = obj[p];\n    }\n  }\n  return clone(newobj);\n}\n\nexport function find(collection, searchParams) {\n  var c = collection.length;\n  while (c--) {\n    var item = collection[c];\n    var found = true;\n    for (var prop in searchParams) {\n      if (!Object.prototype.hasOwnProperty.call(searchParams, prop)) {\n        continue;\n      }\n      if (item[prop] !== searchParams[prop]) {\n        found = false;\n        break;\n      }\n    }\n    if (found) {\n      return item;\n    }\n  }\n}\n\nexport function getLink(obj, linkName, altName?) {\n  if (!obj || !obj._links) {\n    return;\n  }\n\n  var link = clone(obj._links[linkName]);\n\n  // If a link has a name and we have an altName, return if they match\n  if (link && link.name && altName) {\n    if (link.name === altName) {\n      return link;\n    }\n  } else {\n    return link;\n  }\n}\n\n\n\n"],"file":"object.js"}