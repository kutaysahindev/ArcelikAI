"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.interact = interact;

var _oktaIdxJs = _interopRequireDefault(require("@okta/okta-idx-js"));

var _transactionMeta = require("./transactionMeta");

var _oidc = require("../oidc");

var _ = require(".");

var _util = require("../util");

/* eslint-disable @typescript-eslint/no-non-null-assertion */

/*!
 * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint complexity:[0,8] */
function getResponse(meta) {
  return {
    meta,
    interactionHandle: meta.interactionHandle,
    state: meta.state
  };
} // Begin or resume a transaction. Returns an interaction handle


async function interact(authClient, options = {}) {
  var _meta;

  options = (0, _util.removeNils)(options);
  let meta = (0, _transactionMeta.getSavedTransactionMeta)(authClient, options); // If meta exists, it has been validated against all options

  if ((_meta = meta) !== null && _meta !== void 0 && _meta.interactionHandle) {
    return getResponse(meta); // Saved transaction, return meta
  } // Create new meta, respecting previous meta if it has been set and is not overridden


  meta = await (0, _.createTransactionMeta)(authClient, { ...meta,
    ...options
  });
  const baseUrl = (0, _oidc.getOAuthBaseUrl)(authClient);
  let {
    clientId,
    redirectUri,
    state,
    scopes,
    withCredentials,
    codeChallenge,
    codeChallengeMethod,
    activationToken,
    recoveryToken
  } = meta;
  const interactionHandle = await _oktaIdxJs.default.interact({
    withCredentials,
    // OAuth
    clientId,
    baseUrl,
    scopes,
    state,
    redirectUri,
    // PKCE
    codeChallenge,
    codeChallengeMethod,
    // Activation
    activationToken,
    // Recovery
    recoveryToken
  });
  const newMeta = { ...meta,
    interactionHandle,
    // Options which can be passed into interact() should be saved in the meta
    withCredentials,
    state,
    scopes,
    recoveryToken,
    activationToken
  }; // Save transaction meta so it can be resumed

  (0, _transactionMeta.saveTransactionMeta)(authClient, newMeta);
  return getResponse(newMeta);
}
//# sourceMappingURL=interact.js.map