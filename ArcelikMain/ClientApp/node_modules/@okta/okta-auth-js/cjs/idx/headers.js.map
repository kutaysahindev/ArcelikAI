{"version":3,"sources":["../../../lib/idx/headers.ts"],"names":["setGlobalRequestInterceptor","fn","idx","client","interceptors","request","use","createGlobalRequestInterceptor","sdk","requestConfig","oktaUserAgentHeader","_oktaUserAgent","getHttpHeader","headers","Object","assign","options","keys","forEach","name"],"mappings":";;;;;;;AAkBA;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGO,SAASA,2BAAT,CAAqCC,EAArC,EAAyC;AAC9CC,qBAAIC,MAAJ,CAAWC,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAoCL,EAApC;AACD,C,CAED;;;AACO,SAASM,8BAAT,CAAwCC,GAAxC,EAAuD;AAC5D,SAAO,UAAUC,aAAV,EAAyB;AAC9B;AACA,QAAIC,mBAAmB,GAAGF,GAAG,CAACG,cAAJ,CAAmBC,aAAnB,EAA1B;;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAC5B,GAAGL;AADyB,KAAd,EAEbF,GAAG,CAACQ,OAAJ,CAAYH,OAFC,CAAhB;AAGAC,IAAAA,MAAM,CAACG,IAAP,CAAYJ,OAAZ,EAAqBK,OAArB,CAA6BC,IAAI,IAAI;AACnCV,MAAAA,aAAa,CAACI,OAAd,CAAsBM,IAAtB,IAA8BN,OAAO,CAACM,IAAD,CAArC;AACD,KAFD;AAGD,GATD;AAUD","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\n// BETA - SUBJECT TO CHANGE\n// Currently we must modify request headers using the single instance of `idx.client.interceptors` exported from IDX-JS\n// This means that multiple instances of OktaAuth will see the same header modifications\n// TODO: use AuthJS http agent for IDX API requests. OKTA-417473\nimport { OktaAuth } from '../types';\nimport idx from '@okta/okta-idx-js';\nexport function setGlobalRequestInterceptor(fn) {\n  idx.client.interceptors.request.use(fn);\n}\n\n// A factory which returns a function that can be passed to `setGlobalRequestInterceptor`\nexport function createGlobalRequestInterceptor(sdk: OktaAuth) {\n  return function (requestConfig) {\n    // Set user-agent and any other custom headers set in the options\n    var oktaUserAgentHeader = sdk._oktaUserAgent.getHttpHeader();\n    const headers = Object.assign({\n      ...oktaUserAgentHeader\n    }, sdk.options.headers);\n    Object.keys(headers).forEach(name => {\n      requestConfig.headers[name] = headers[name];\n    });\n  };\n}\n"],"file":"headers.js"}