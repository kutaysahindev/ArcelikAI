"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.AuthenticatorData = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Remediator = require("./Remediator");

/* eslint-disable @typescript-eslint/no-non-null-assertion */

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and limitations under the License.
 */
// Base class - DO NOT expose static remediationName
class AuthenticatorData extends _Remediator.Remediator {
  constructor(remediation, values = {}) {
    super(remediation, values); // set before other data calculation

    (0, _defineProperty2.default)(this, "map", {
      'authenticator': []
    });
    this.authenticator = this.getAuthenticator();
    this.formatAuthenticatorData();
  }

  formatAuthenticatorData() {
    const authenticatorData = this.getAuthenticatorData();

    if (authenticatorData) {
      this.values.authenticatorsData = this.values.authenticatorsData.map(data => {
        if (data.key === this.authenticator.key) {
          return this.mapAuthenticatorDataFromValues(data);
        }

        return data;
      });
    } else {
      const data = this.mapAuthenticatorDataFromValues();

      if (data) {
        this.values.authenticatorsData.push(data);
      }
    }
  }

  getAuthenticatorData() {
    return this.values.authenticatorsData.find(({
      key
    }) => key === this.authenticator.key);
  }

  canRemediate() {
    return this.values.authenticatorsData.some(data => data.key === this.authenticator.key);
  }

  getNextStep() {
    const common = super.getNextStep();
    const options = this.getMethodTypes();
    return { ...common,
      ...(options && {
        options
      })
    };
  }

  mapAuthenticatorDataFromValues(authenticatorData) {
    // add methodType to authenticatorData if it exists in values
    const {
      methodType
    } = this.values;
    const data = {
      key: this.authenticator.key,
      ...(authenticatorData && authenticatorData),
      ...(methodType && {
        methodType
      })
    };
    return data.methodType ? data : null;
  }

  getAuthenticatorFromRemediation() {
    const authenticator = this.remediation.value.find(({
      name
    }) => name === 'authenticator');
    return authenticator;
  }

  getMethodTypes() {
    var _value$find;

    const authenticator = this.getAuthenticatorFromRemediation();
    return (_value$find = authenticator.form.value.find(({
      name
    }) => name === 'methodType')) === null || _value$find === void 0 ? void 0 : _value$find.options;
  }

  getValuesAfterProceed() {
    this.values = super.getValuesAfterProceed(); // remove used authenticatorData

    const authenticatorsData = this.values.authenticatorsData.filter(data => data.key !== this.authenticator.key);
    return { ...this.values,
      authenticatorsData
    };
  }

}

exports.AuthenticatorData = AuthenticatorData;
//# sourceMappingURL=AuthenticatorData.js.map