"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.SelectEnrollmentChannel = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Remediator = require("./Base/Remediator");

var _util = require("./util");

/*!
 * Copyright (c) 2021-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and limitations under the License.
 */
class SelectEnrollmentChannel extends _Remediator.Remediator {
  canRemediate() {
    return Boolean(this.values.channel);
  }

  getNextStep(context) {
    const common = super.getNextStep();
    const options = this.getChannels();
    const authenticator = context.currentAuthenticator.value;
    return { ...common,
      ...(options && {
        options
      }),
      authenticator
    };
  }

  getChannels() {
    var _remediationValue$for;

    const authenticator = (0, _util.getAuthenticatorFromRemediation)(this.remediation);
    const remediationValue = authenticator.value;
    return (_remediationValue$for = remediationValue.form.value.find(({
      name
    }) => name === 'channel')) === null || _remediationValue$for === void 0 ? void 0 : _remediationValue$for.options;
  }

  getData() {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const remediationValue = this.remediation.value[0].value;
    return {
      authenticator: {
        id: remediationValue.form.value[0].value,
        channel: this.values.channel
      },
      stateHandle: this.values.stateHandle
    };
  }

  getValuesAfterProceed() {
    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'channel');
    return trimmedValues.reduce((values, valueKey) => ({ ...values,
      [valueKey]: this.values[valueKey]
    }), {});
  }

}

exports.SelectEnrollmentChannel = SelectEnrollmentChannel;
(0, _defineProperty2.default)(SelectEnrollmentChannel, "remediationName", 'select-enrollment-channel');
//# sourceMappingURL=SelectEnrollmentChannel.js.map